一、事件编程
1、事件切换
	hover(over,out) ：鼠标悬浮与鼠标离开事件
		over：鼠标悬浮时所触发的事件处理程序（函数）
		out：鼠标离开时所触发的事件处理程序（函数）
	toggle(fn,fn...) ：点击触发事件，顺序触发
		fn：当第一次单击时，所触发的事件处理程序
		fn：当第二次单击时，所触发的事件处理程序
		…
	案例01：折叠菜单
2、事件绑定
	bind(type,[data],fn) ：为元素绑定相关事件
	bind({type:fn,type:fn}) ：为元素绑定多个事件，要求参数是一个json格式的数据
	one(type,[data],fn) ：为元素事件进行一次绑定
	unbind([type]) ：移除事件
		参数说明：
		type：事件类型，不带’on’前缀，如click、mouseover、mouseout
		[data]：事件发生时所传递的参数（了解）
		fn：事件的处理程序



特别说明：其实在jQuery的事件绑定中，其内部存储一个特殊的对象：this对象，其指向当前正在操作的DOM对象，如果想使用jQuery对象的属性或方法，必须通过$进行封装。

3、事件冒泡
事件冒泡是指事件的响应会像水泡一样上升至最顶层对象。
在原生Javascript代码中可以通过如下方式禁止：
IE：
	window.event.cancelBubble = true;
W3C：
	DOM对象.事件 = function(event) {
		event.stopPropagation();
	}

事件冒泡有些情况下是人为设计的，但是大部分情况下，冒泡需要禁止
event对象不是原生代码中的事件对象，在jQuery中对event对象进行了封装，并绑定了一个stopPropagation方法。
	$('#div').bind('click',function(event){
		event.stopPropagation();
	});

4、默认行为
在有些HTML标签中，有些元素具有自己的默认行为。如：
超级链接标签a：当我们单击某个链接时，可以发生链接的跳转
表单提交按钮submit：当我们单击sumbit按钮时，可以提交表单数据
但是在有些情况下，我们需要人为的禁止元素的默认行为：

在Javascript原生代码中，可以通过如下方式对元素的默认行为进行禁止:
	IE：
	window.event.returnValue = false;
	W3C：
	DOM对象.事件 = function(event) {
		event.preventDefault();
	}
在jQuery代码中，可以通过如下方式进行默认行为的禁止：
	$('#div').bind('click',function(event){
		event.preventDefault();
	});
二、动画效果
	基本效果
	滑动效果
	淡入淡出效果
	自定义动画
1、基本效果
	show() : 显示
	show(speed,[callback]) ：以动画效果显示
	hide() ：隐藏
	hide(speed,[callback]) ：以动画效果隐藏
	toggle() ：切换显示或隐藏，如果元素是显示的，则隐藏，反之，则显示
	toggle(switch) ：显示或隐藏开关，如为true，则显示，如为false，则隐藏
	toggle(speed,[callback]) ：以动画效果显示或隐藏

	参数说明：
	speed：动画速度（动画的持续时间，单位是毫秒）
	或
	speed:"slow", "normal", "fast"
	callback：动画完成时，所触发的回调函数


2、滑动效果
	slideDown(speed,[callback]) ：以动画效果向下滑动
	slideUp(speed,[callback]) ：以动画效果向上滑动
	slideToggle(speed,[callback]) ：以动画效果向上或向下滑动
	
	参数说明：
	speed：动画持续事件
	callback：动画完成时，所触发的回调函数

3、淡入淡出效果
	fadeIn(speed,[callback]) ：以动画效果淡入
	fadeOut(speed,[callback]) ：以动画效果淡出
	fadeTo(speed,opacity,[callback]) ：以动画效果设置元素的透明度，0全透明1不透明
	
	参数说明：
	speed：动画的持续事件
	callback：动画完成时，所触发的回调函数
	opactity：元素的透明度，0全透明1不透明，0-1半透明效果


4、自定义动画
	animate(params,[speed]) ：设置自定义动画

	参数说明：
	params：要求是一个json格式的数据
	speed：动画的持续时间

案例02：仿好123的左侧导航效果
案例03：实现一组图片的淡入淡出效果
案例04：一组折叠菜单

三、文档操作
插入(内部插入与外部插入),删除,复制,替换,包裹,查找
1、内部插入
<div>(content)Hello(content)</div>
	append(content)		：在元素内部的尾部追加内容content
	appendTo(content)	：将匹配到的内容插入到指定的内容content的尾部
	prepend(content)	：在元素内部的头部追加内容content
	prependTo(content)	：将匹配到的内容插入到指定的内容content的头部
案例05：下拉选框移动事件
2、外部插入
(content)<div>hello</div>(content)
	after(content)	：在元素尾部插入内容content
	before(content) ：在元素头部插入内容content
	insertAfter(content)	：将匹配的内容插入到content元素的尾部
	insertBefore(content)	：将匹配的内容插入到content元素的头部
3、删除操作
	empty() ：清空元素的内容,但不清除元素本身
	remove() ：移除元素(包括元素的内容和元素本身)
4、复制操作
	clone() ：克隆元素
	clone(true) ：克隆元素本身同时克隆元素本身的事件
案例06：滚动公告
案例07：模拟天猫的购物车
5、替换操作
	html() ：值替换
	replaceWith() ：节点替换
6、包裹操作
<div><strong> hellojquery!</strong></div>
	wrap()		：对所有匹配的元素进行单独包裹
	wrapAll()	：对所有匹配的元素进行统一包裹，只包裹一次
	wrapInner() ：对所有匹配的元素的内容进行单独包裹
7、查找操作
	eq(index)	：根据元素的索引index查找元素，默认从0开始
	filter(expr) ：筛选出与指定表达式匹配的元素集合
	not(expr)	 ：匹配出指定元素外的其他元素
	children([expr]) ：匹配当前元素的所有子元素
	find(expr)	：匹配当前元素的所有后代元素
	next([expr]) ：匹配当前元素紧邻的下一个元素
	prev([expr]) ：匹配当前元素紧邻的上一个元素
	parent([expr]) ：匹配当前元素的父元素
	siblings() ：匹配当前元素的所有同级兄弟元素

中午我们编写的折叠菜单也可以通过.next()进行改写：
案例08：下拉菜单功能

四、jQuery插件机制
在实际项目开发中，如果发现jQuery缺少我们需要的某些功能，那么我们不能直接修改jQuery的源代码，我们可以使用jQuery提供的插件扩展机制，实现对jQuery库的扩充。

1、jQuery的插件扩展
jQuery.fn.extend(object)或$.fn.extend(object)
该扩展机制非常简单，只有一个参数object，要求是一个json格式的数据。
jQuery.fn.extend({
	fn1:function(){},
	fn2:function(){},
	......
});
2、示例代码
3、实际应用：实现后台全选、全不选、反选功能
具体代码请参考anli09.php，运行效果：

特别说明：
在jQuery事件绑定中，其内部的this对象指向正在操作的DOM对象
而
jQuery中的插件扩展机制，由于是jQuery对象在引用相关的扩展方法，所以其内部的this对象指向正在操作的jQuery对象，谨记！！！