字段类型
数值型: 整型和小数型
	整型
		tinyint: 迷你整型,使用1个字节存储, 最多能存储256个数据
		smallint: 小整型,使用2个字节存储, 最多存储65536个数据
		mediumint: 中整型,使用3个字节存储
		int: 标准整型,使用4个字节进行存储
		bigint: 大整型, 使用8个字节进行存储
	小数型: 浮点型和定点型
		浮点型两种: 单精度和双精度
			单精度: float, 使用4个字节进行存储,有效数字7位左右<精度范围之外四舍五入>
			双精度: double,使用8个字节存储,有效数字15位左右
				创建浮点数表: 精度可以指定
				float: 表示浮点数, 没有小数的浮点数
				float(M,D): M(位数)为总长度, D为小数长度, (M-D)为整数长度
		定点型
			小数点位置固定,(整数部分) 精度不丢失
			decimal(M,D): M为总长度,D为小数长度: 整数部分不会丢失精度, 但小数部分有可能
时间日期型
	datetime: 时间日期
	timestamp: 时间戳, 表示从1970年开始,使用的格式不是真实时间戳,而是与datetime格式一致
	date: 天,就是datetime的date部分
	time: 既可以表示时间, 又可以表示时间段, 过去的某段时间或者将来的某段时间
	year: 年,分为两种格式: year(4)标准4位年, 1901-2155, year(2)表示从1970-2069
字符串数据类型(6种)
	char: 定长字符
	varchar: 变长字符
	text: 文本字符
	blob: 二进制文本字符
	enum: 枚举字符
	set: 集合字符
		定长字符串
			char(M): 会给数据分配固定的存储空间, M代表字符数, M不能超过255
		变长字符串
			varchar(L): 给数据分配的存储空间不固定, 1个或2个字节保存数据原始长度,L的理论值可达65536. 
		文本类型分为两种: 字符型和二进制型
			字符型字符串: text
			二进制型字符串: blob
		枚举类型
			枚举: 事先将可能出现的数据定义好: 以后存放的数据必须是指定的数据里面某一个数据. 
			枚举: enum(数据1,数据2,数据3...);
		集合类型
			集合：set
			set(元素1,元素2,元素3...);
列属性有: comment(注释),NULL/NOT NULL(数据是否允许为空),default(默认值), 
		  primary key(主键), unique key(唯一键), Auto_increment(自增长)
	空
		NULL/NOT NULL, 主要是用来限制数据(字段)是否允许为空.
	默认值
		default,  大部分的默认值是NULL)
	主键
		primary key, 主要的键(索引), 用来唯一的标志一条记录 ,不允许出现重复.
			增加主键（或成复合主键）
				方案1: 直接在字段之后,使用primary key,让字段变成主键
				方案2:所有字段之后,设主键
					primary key(字段列表); 
				方案3: 在表创建好之后,再增加主键
					alter table 表名 add primary key(主键列表);
	自增长
		 auto_increment
			auto_increment_offset = 1;  -- 初始值
			auto_increment_increment = 1; -- 每次增加1
			show variables like 'auto_increment%';
	唯一键
		unique key 与主键相似: 保证数据的唯一性.
		唯一键: 允许为空(不统计为空的数据), 唯一键可以在一张表中有多个
		<主键和唯一键不可以被修改,都只能被删除,后增加>
			增加唯一键(与主键的增加几乎一致)
				方案1: 在字段之后直接增加唯一键: unique[ key];
				方案2: 在所有字段之后增加唯一键
					unique key(字段列表); -- 可以有复合唯一键
				方案3:在表创建结束之后增加唯一键
					alter table 表名 add unique key(字段列表);
