/***key***/
RegExp类（只能由正则对象调用）
test() ：判断字符串中是否含有指定模式的子串：返回布尔类型数据true含有，false不含有
exec() ：返回指定模式的字符串

String类（只能由String类对象调用）
search() ：返回指定模式的子串在字符串中出现的位置，默认从0开始
match() ：返回指定模式的字符串，返回类型为数组
replace() ：替换指定模式的子串
split ：通过指定模式的子串对字符串进行分割，返回类型为数组

正则表达式三步走
第一步：查什么
第二步：查多少
第三步：从哪查

/***content***/
一、正则表达式
1、正则表达式解疑
几乎所有的编程语言中都支持正则表达式
java、c#、php、Javascript
数据库：sql语言（mysql、sqlserver、access）
xml：xpath（php、Javascript）
正则表达式：php、Javascript
2、正则表达式起源
1956年，美国两位生理方面的科学家用一种数学符号的形式来描述了大脑的神经系统（神经元），后来被Unix之父引用到了Unix系统中，之后又被广泛应用到计算机系统中…后来更名为“正则表达式”。
3、什么是正则表达式
正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。 
精准匹配：匹配固定的某个结果
模糊匹配：匹配满足条件的所有结果
4、应用场景
1）数据验证	  验证邮箱是否合法、验证手机号码
2）数据隐藏	  抽奖中手机号码的隐藏（138****6644）
3）数据过滤	  网站很多敏感关键词都被河蟹了，政府（zf）
4）数据采集	  l389o826633
二、正则对象
使用正则表达式有一个前提，首先必须要创建一个正则对象。
1、正则对象的创建
	1）隐式创建
	var 正则对象 = /正则表达式/匹配模式;
	正则对象是系统类RegExp类的实例
	2）显式创建（直接实例化）
	var 正则对象 = new RegExp(‘正则表达式’,’匹配模式’);
2、匹配模式
	g：global（全局），匹配所有满足条件的字符，直至结束
	i：ignore（忽略），忽略字符中的大小写
3、常用的几个方法
	在Javascript中，一共有两个类提供了对正则表达式的支持（String类、RegExp类）
	RegExp类（只能由正则对象调用）
		test() ：判断字符串中是否含有指定模式的子串：返回布尔类型数据true含有，false不含有
		exec() ：返回指定模式的字符串

	String类（只能由String类对象调用）
		search() ：返回指定模式的子串在字符串中出现的位置，默认从0开始
		match() ：返回指定模式的字符串，返回类型为数组
		replace() ：替换指定模式的子串
		split ：通过指定模式的子串对字符串进行分割，返回类型为数组
三、几个常用的概念
1、子表达式
在正则表达式中，通过一对圆括号括起来的内容，我们就称之为“子表达式”
var reg = /我们都是(好孩子)/gi;
2、捕获
子表达式匹配到相应的内容后会被系统所捕获，并把匹配到的内容放入系统的缓存区中，缓冲区是从1开始编号并依次递增（第一个缓存区1号，第二个叫做2号缓冲区…）
3、反向引用
在正则表达式中可以通过\n（n代表缓存区中编号）来引用缓冲区保存的内容
四、exec方法与子表达式
例1：exec方法：返回指定模式的子串，如果想实现输出所有数据，必须结合while循环进行遍历输出。
五、正则表达式详解
1、正则表达式三步走
第一步：查什么
第二步：查多少
第三步：从哪查
2、正则表达式构成
正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为元字符）组成的文字模式。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。 
普通字符：abcd  0123
特殊字符（元字符）：\d  \w  \D
3、元字符中的匹配符（第一步：查什么）
字符簇：在正则表达式中，通过一对方括号括起来的我们就称之为“字符簇”
[a-z]：其指定的是一个范围，如从a到z，但是其匹配时只能匹配固定的某个字符
常用字符簇：
[a-z] ：匹配小写字母a到小写字母z中的任一字符
[A-Z] ：匹配大写字母A到大写字母Z中的任一字符
[0-9] ：匹配数字0-9之间的任一字符
[0-9a-z] ：匹配数字0-9或字符a-z中的任一字符
[0-9a-zA-Z] ：匹配0-9、a-z、A-Z中的任一字符
[abcd] ：匹配字母a或字母b或字母c或字母d
[1234] ：匹配数字1234中的任一字符
在正则表达式中，如果一个字符簇是以脱字节^开始，代表取反
[^a-z] ：匹配除a-z以外的任一字符
[^0-9] ：匹配除0-9以外的任一字符
[^abcd] ：匹配除abcd以外的任一字符
\d ：匹配一个数字字符，可以使用[0-9]代替
\D ：匹配一个非数字字符，可以使用[^\d]代替
\w ：匹配包括下划线的任何单词字符，可以使用[0-9a-zA-Z_]
\W ：匹配任何非单词字符，可以使用[^\w]代替
\s ：匹配任何空白字符，空格、制表符、换行符
\S ：匹配任何非空白字符，可以通过[^\s]代替
. （我是点号） ：匹配除 "\n" (空格)之外的任何单个字符
4、元字符中的限定符（第二步：查多少）
限定符可以指定正则表达式的一个给定组件必须要出现多少次才能满足匹配
*		匹配前面的子表达式零次或多次，0或多，可以使用{0,}来进行代替
+		匹配前面的子表达式一次或多次，1或多，可以使用{1,}来进行代替
?		匹配前面的子表达式零次或一次，0或1，可以使用{0,1}来进行代替
{n}		匹配确定的 n 次
{n,}	至少匹配n 次
{n,m} 	最少匹配 n 次且最多匹配 m 次
5、贪婪匹配与懒惰匹配
【贪婪匹配】
正则表达式如果使用了量词（限定符），会优先匹配多的情况，我们就称之为“贪婪匹配原则”，默认正则表达式使用的就是贪婪匹配原则。
【懒惰匹配】- 非贪婪匹配
在正则表达式的限定符后面添加一个？，正则表达式将优先匹配少的情况，我们把这种就称之为”懒惰匹配原则“
6、元字符中的定位符（第三步：从哪查）
定位符可以将一个正则表达式固定在一行的开始或结束。也可以创建只在单词内或只在单词的开始或结尾处出现的正则表达式。 
^ 	匹配输入字符串的开始位置
$ 	匹配输入字符串的结束位置
\b 	匹配一个单词边界（一个单词的开始或结尾）
\B 	匹配非单词边界（字符出现在单词的内部）

例1：匹配11位手机号码
例2：匹配单词边界与非单词边界
说明：正则对象中的lastIndex索引具有兼容性问题，在高版本浏览器中可能无法弹出，可以使用兼容模式。
7、转义符
在正则表达式，如果使用到了特殊符号，必须通过反斜杠\进行转义
* 	 +	  ?    [   ]   (   )   {   }  .  \   /  
匹配特殊字符空格
8、选择匹配符
在正则表达式中，可以通过竖线|来匹配多个规则
9、特殊用法（零点断言）
(?=exp) ：正向预查，匹配后面是exp的字符
(?!exp) ：负向预查，匹配后面不是exp的字符
(?:) ：输出结果但不捕获
特别说明：
replace方法中的第二个参数有一种特殊用法：
replace(正则对象,’$n’)：n代表缓存区的编号，此功能代表引用系统n号缓冲区中的内容
七、编写正则工具箱


剩下的4个方法作为今天的作业
八、正则表达式作业
•验证邮箱是否有效
•验证网址是否有效（http或https）
•验证ip地址是否有效

思考题：如何把手机号码中的中间4为替换成****	
如：13976821154替换后139****1154

通过查询手册或百度，掌握PHP中的几个正则方法：
preg_match
preg_match_all
preg_filter
preg_replace
preg_split
编写百度图片正则采集器，定义一个正则表达式，可以采集百度图片
http://image.baidu.com/

并创建文件夹并放入文件夹中

