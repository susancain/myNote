/***key***/
面向过程的核心思想：将一个系统分解为若干个步骤，每个步骤就是一个函数
面向对象的核心思想：把一个系统分解为若干个事务，每个事务就是一个类

在Javascript是没有class关键词的，但是可以通过定义函数来隐式创建一个自定义类，在运行过程中，系统会自动认为当前函数是系统中同名类下的构造函数（在Javascript也称之为“构造器”）

创建对象最根本目的就是为了保存更多的数据。

关于属性的使用
语法：
对象.属性;（点号）
对象[‘属性’];（方括号）

注：
数组也是一个对象，文本下标型数据都是以属性的形式追加到数组中的。
数组.文本下标
在Javascript属性都是动态添加的，先创建对象然后在动态赋值。

如果传递参数较多，不妨考虑使用对象作为函数的参数，这样可以减少参数的

函数形参值的改变不会影响实参，但对象传值除外

自定义属性的删除	delete （自定义）对象.属性

定义成员方法
对象.属性 = function() {
	//函数体
}
成员方法的调用方式如下：
对象.属性();

JSON是一组无序数据的集合
这个集合可以通过一对{}花括号进行表示
这个集合的内部是由名/值对组成的

JSON是一种通用的数据传输格式，主要用于数据的传输与存储

JSON定义	var 对象 =  {属性:值,属性:值,…};

JSON调用基本语法：	JSON对象.属性

书上会说：JSON是自定义对象的隐式创建方式

调用第三方接口：
把第三方网站的接口数据（XML或JSON）转化为我们可识别的数据

答疑1：
json_encode只能转化编码格式为utf-8编码格式的数据，如果你使用的是gbk或gb2312请使用iconv函数进行转化。
答疑2：
json_encode会对中文进行加密，解析时会自动转义

当Person构造器的实例化对象访问一个不存在的属性或方法时，系统首先到当前构造器的原型对象中去寻找，如找到，则直接使用。

在实际项目开发中，我们通常使用别人开发好的类或框架，当我们发现其内部缺少我们需要的属性或方法时，不能直接修改源代码，可以通过原型对象对其进行扩充。

原型对象在生成过程中，都需要执行以下步骤：
类.prototype（原型对象） =  new Object();

说明：原型链
当Person构造器的实例化对象p1对象访问一个不存在的属性或方法时，系统首先到Person构造器的原型对象中去寻找，又由于Person原型对象是Object类的实例，当系统加载Object构造器的同时也会生成Object原型对象，基于原型对象的原则，当p1对象找不到相关属性或方法，首先到Person原型对象中去寻找，如找不到会继续向上一级原型对象中去寻找，直到Object原型对象中，我们把这种链式的查询关系就称之为“原型链”

/***interview***/
面试题：请你说说对XML与JSON的看法，哪个好？
答：千万不要答哪个好或哪个不好，你可以说两者都有各自优势
XML本身历史比较悠久，兼容性比较，在很多方面如QQ、Wechat、WebService等方面都有应用，对各种编程语言的支持都非常好。
JSON是近几年崛起的数据传输格式，其可以让数据的生成与解析变的更加简单，应用也更加广泛，在第三方接口方面有优势。

/***content***/
面向过程的核心思想：将一个系统分解为若干个步骤，每个步骤就是一个函数
面向对象的核心思想：把一个系统分解为若干个事务，每个事务就是一个类

面向对象的两大关键词
类：类是对某一类事务的描述，是抽象的
对象：对象是对描述的实例化，是具体的

Javascript的类
一.javascript常用的系统类
1）String字符串类
	在Javascript中，通过一对单引号或双引号隐式创建String类的实例
String类常用属性与方法
	length ：返回字符串的长度
	indexOf(string)	：返回参数在字符串中的位置（默认从0开始）
	substr(num1,[num2]) ：返回截取后的字符串（从num1到num2）
	toLowerCase() ：返回小写
	toUpperCase()	：返回大写
	replace(str1,str2) ：返回替换后的字符串（用str2替换str1）
Date日期和时间类
	在Javascript中，通过直接实例化来显示创建日期和时间类的实例.		var date = new Date();
常用属性和方法：
	getYear()	：获取年份（有兼容性问题）
	getFullYear() ：获取完整年份，返回格式2015
	getMonth() ：获取月份（0-11）
	getDate() ：获取当月第几天（1-31）
	getDay() ：获取星期几（0-6）
	getHours() ：获取小时
	getMinutes() ：获取分钟
	getSeconds() ：获取秒数
	getMilliseconds() ：获取毫秒数
	getTime() ：获取时间戳
Math数学类
	在Javascript中，Math数学类下的所有属性和方法都是静态的.
常用属性和方法：
	Math.ceil(数值)	：返回大于或等于该数最小整数
	Math.floor(数值)	 ：返回小于或等于该数最大整数
	Math.round(数值) ：返回四舍五入后的结果
	Math.min(数值1,数值2) ：返回最小值
	Matn.max(数值1,数值2) ：返回最大值	
	Math.random() ：返回0-1之间的随机数	
	Math.pow(数值1,数值2) ：返回数值1的数值2次方，2的2次方=4
	Math.sqrt(数值) ：返回开平方，4开平方=2

二.自定义类
1.自定义类详解
在有些面向对象的编程语言（如php、java、c#）中，可以通过class关键词来定义自定义类，
在Javascript没有class关键词，但可以通过定义函数来隐式创建一个自定义类，在运行过程中，系统会自动认为当前函数是系统中同名类下的构造函数（在Javascript也称之为“构造器”）

2.自定义对象详解
在面向对象中，类是对某一类事务的描述，是抽象的，如果想对其进行使用，必须实例化对象。
基本语法：
	var 对象 = new 类名();

3.使用属性来保存数据
对象.属性;（点号）
对象['属性'];（方括号）

注：数组也是一个对象，文本下标型数据都是以属性的形式追加到数组中的。
	数组.文本下标
	Javascript属性都是动态添加的，先创建对象然后再动态赋值。

4.属性存放的数据类型
	数值 		对象.age = 20;
	字符串		对象.name = 'xiaoqiang';
	布尔值		对象.marry = true;
	对象		window.document

5.在Javascript中一切都是对象
	var num = 10; //Number
	var str =hello; //String
	var flag = true; //Boolean
	var per = new Person(); //自定类对象，Person类的实例

6.面向对象三大关键词
	alert( typeof p ); ：判断变量的数据类型
	alert( p.constructor ); ：返回当前对象指向的构造函数
	alert( p instanceof person ); ：判断某个对象是否为某个类的实例

三.对象在内存中的表现形式
在Javascript中，数据类型分为两大类，值类型与引用类型
值类型数据：（创建一个值的副本然后传递给其他参数）
	String字符串类型
	Number数字类型
	Boolean布尔类型
	Undefined 未定义类型
	Null 空类型		
引用类型：（把当前值的内存地址赋值给其他参数）
	Object
说明：由于值类型的数据比较简单，如果放置于堆内存，由于经常要对其进行操作，可以会浪费更多的资源。所以我们通常把其放在栈内存中，这样可以减少内存开销。

四.this对象
全局作用域的this指向window对象
谁调用了函数,函数内部的this就指向谁
1、引出问题
	有些面向对象的编程语言，实例化对象时，对象会自动继承类中的所有属性和方法。
this指向何方
	在Javascript中所有对象的属性都是动态添加的，这样操作起来代码比较冗余，有没有办法让我们的对象在创建时自动拥有默认属性和方法呢？
	答：可以通过this对象来实现:对象在创建时自动拥有默认属性和方法
深入理解this对象
	在Javascript中其实并没有变量或函数的概念，所有的变量或对象都是以属性的形式添加到window对象中。

五.对象之间的赋值
	对象作为函数的参数
	对象作为函数的返回值
	函数形参值的改变不会影响实参值，但对象传值除外
六.对象属性的遍历与删除
	1.属性的遍历
	for…in…循环遍历对象输出,获得对象中的属性
	for…in…循环除了可以遍历自定义对象，其还可以用于遍历系统对象
	2.自定义属性的删除
	delete (自定义)对象.属性

七.定义成员方法
	成员方法的定义
		对象.属性 = function() {
			//函数体
		}
	成员方法的调用：
		对象.属性();

八.JSON数据格式
1、什么是JSON
	JSON是一组无序数据的集合
	这个集合可以通过一对{}花括号进行表示
	这个集合的内部是由名/值对组成的
2、JSON主要功能
JSON是一种通用的数据传输格式，主要用于数据的传输与存储，在某些方面可以替代XML

面试题：请你说说对XML与JSON的看法，哪个好？
答：千万不要答哪个好或哪个不好，你可以说两者都有各自优势
XML本身历史比较悠久，兼容性比较，在很多方面如QQ、Wechat、WebService等方面都有应用，对各种编程语言的支持都非常好。
JSON是近几年崛起的数据传输格式，其可以让数据的生成与解析变的更加简单，应用也更加广泛，在第三方接口方面有优势。
3、JSON定义
var 对象 = {属性:值,属性:值,…};
var 对象 = [{},{},{}];
4、JSON调用
	JSON对象.属性
	(JSON是自定义对象的隐式创建方式)
5.使用JSON保存大批量数据	
	var 对象 = [{},{},{}];
6、对大批量的数据进行遍历操作
	for(var i in 对象){
		document.write(对象[i].属性1+对象[i].属性2+对象[i].属性3);
	}
7、JSON自定义成员方法
	var 对象 = {属性:function(){}};
8、PHP与JSON的数据转换
在PHP中提供了两个函数实现了对JSON数据的支持：
json_encode($数组/$对象)：把一个数组或对象转化为json的数据格式
json_decode($json,$flag)：把一个json数据转化为数组或对象
参数说明：
$json：json数据
$flag：布尔类型的值，
	   如果为true，代表把json转化为数组
	   如果为false(默认值),代表把json转化为对象	

应用场景：开发第三方接口或调用第三方接口
开发第三方接口：
把用户需要的数据转化成XML或JSON
调用第三方接口：
把第三方网站的接口数据（XML或JSON）转化为我们可识别的数据

答疑1：
json_encode只能转化编码格式为utf-8编码格式的数据，如果你使用的是gbk或gb2312请使用iconv函数进行转化。
答疑2：
json_encode会对中文进行加密，解析时会自动转义

9、JSON主要用途
	Ajax中要使用JSON作为数据的交换格式
	使用PHP+JSON调用在线的第三方接口
九、使用PHP+JSON完成语音验证码

十、原型链
1、原型对象
当系统加载Person构造器时，系统在内存中会自动生成一个对象，我们就称之为“原型对象”
构造器与原型对象之间表现为相对独立，不存在谁包含谁的关系，但是两者之间又有一定的联系：
在构造器的内部存在一个prototype属性，其指向了原型对象
在原型对象的内部也存在一个constructor属性，其指向了构造器

2、原型对象的作用
当Person构造器实例化的对象访问一个不存在的属性或方法时，系统首先到当前构造器的原型对象中去寻找，如找到，则直接使用。

3、证明constructor与prototype互相指向关系

4、原型对象应用场景
在实际项目开发中，我们通常使用别人开发好的类或框架，当我们发现其内部
缺少我们需要的属性或方法时，不能直接修改源代码，可以通过原型对象对其进行扩充。
在实际应用中也可以用于扩充系统类对象

5、原型对象从何而来
原型对象也是一个对象，其肯定是由某个类实例化而来。
原型对象在生成过程中，都需要执行以下步骤：
类.prototype(原型对象) =  new Object();

说明：原型链
当Person构造器的实例化对象p1对象访问一个不存在的属性或方法时，系统首先到Person构造器的原型对象中去寻找，又由于Person原型对象是Object类的实例，当系统加载Object构造器的同时也会生成Object原型对象，基于原型对象的原则，当p1对象找不到相关属性或方法，首先到Person原型对象中去寻找，如找不到会继续向上一级原型对象中去寻找，直到Object原型对象中，我们把这种链式的查询关系就称之为“原型链”