/***key***/
闭包的作用
	闭包可以使我们在全局作用域中访问局部变量
	闭包可以让局部变量一直驻留在计算机的内存中

我理解的闭包
	1）函数中的函数
	2）这个函数作为程序的返回值
	如果想在全局作用域访问局部变量，就可以使用闭包来进行获取，闭包如何定义：
	在函数的内部在定义一个函数，并把这个函数的首地址作为函数的返回值。

第二种方法是更改Person构造器中的this指向，其可以完成类的继承，但是会增大对象的体积。
第三种方法是通过原型继承的方式来实现类的继承，没有增大对象的体积，此方法应该是最优的。

/***content***/
一、Object类
在Javascript中，Object类是所有类（系统类和自定义类）的基类（父类），使用Object类创建自定义对象时无需指定构造函数。
1、Object类是所有类的基类
原型链
【原型对象】
当系统加载Person构造函数的同时，系统会自动生成Person的原型对象，两者在内存中表现为相互独立，但是Person构造器的内部存在一个prototype的属性指向了Person的原型对象，同时原型对象的内部而存在一个属性constructor指向了Person构造器。
【原型对象的作用】
当Person构造器的实例化对象访问一个不存在的属性或方法时，系统会自动到Person构造器的原型对象中去寻找：
【原型对象的应用】
实际开发中，我们使用的通常是由第三方开发的框架（自定义类），当我们实例化对象时，发现框架不存在我们需要的属性或方法，这个时候，我们不能直接修改原框架，但是可以通过原型对象对其进行扩充。
基本语法：
类名.prototype（原型对象）.自定义属性 = 属性的值;
【原型对象从何而来？】
所有的原型对象（无论是系统还是自定义）在生成时都会自动执行以下代码：
类.prototype = new Object();
所以可以得出结论：
Javascript中的类的原型对象都是Object实例化而来的，所以两者是实例化关系，根据面向对象的原则，原型对象可以继承Object类中的所有属性和方法，又由于p1对象访问一个不存在的属性或方法时，系统会自动到当前构造器的原型对象中去寻找，原型对象又自动继承Object构造器的所有属性和方法，我们可以这样认为p1也会自动继承Object类的所有属性和方法，所以Object类是所有类的基类，我们把这种继承关系也称之为“原型继承”

如何证明以上结论：
Object类下具有一个方法hasOwnProperty()方法，其主要功能是判断一个对象是否具有某个属性，返回布尔类型的值。

2、使用Object类创建自定义对象时可以无需指定构造函数

二、静态属性
1、什么是静态属性
有些面向对象编程语言可以通过static关键词来定义静态属性,Javascript可以通过模拟的方式来实现。
实例属性：对象.属性
原型属性：类.prototype.属性
	问题：什么样的属性应该声明为静态属性呢？
	答：静态属性并不属于单独的某个对象，而是所有对象所共同拥有的属性，这个时候就可以把这个属性声明为静态属性。
2、定义静态属性
	类名.属性名（静态属性）
	在Javascript中，Math数学类下的所有属性和方法都是静态的。
		实例化对象总共执行了两个步骤：
		1）开辟内存空间
		2）执行构造函数
3、定义静态方法
	静态方法主要功能：用于操作静态属性。
	类名.方法名 = function() {}


实例属性：对象.属性
原型属性：类.prototype.属性
静态属性：类.属性
三、函数闭包（closure）
1、什么是闭包
所谓“闭包”，指的是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。
2、闭包的作用
	闭包可以使我们在全局作用域中访问局部变量
	闭包可以让局部变量一直驻留在计算机的内存中
3.Javascript的两种回收机制（引用计数器、标记）
4、使用闭包访问局部变量
有些情况下，我们需要在全局作用域中访问局部变量，这个时候就可以使用闭包来完成。
所以我们把var i与绑定了变量的i的环境表达式（通常是一个函数）fn函数，统一称之为“闭包”
5、我理解的闭包
1）函数中的函数
2）这个函数作为程序的返回值
在实际项目开发中，如果想在全局作用域访问局部变量，就可以使用闭包来进行获取，闭包如何定义：
在函数的内部在定义一个函数，并把这个函数的首地址作为函数的返回值。
6、使用闭包让局部变量一直驻留在内存中
虽然闭包很方便使用，其也可以做两件事：
1）访问局部变量
2）让变量一直驻留在计算机内存中
尽量少使用闭包，因为其会导致局部变量不能被js的垃圾回收机制所回收，会占用大量内存空间，可能导致内存泄漏
四、私有属性
在有些面向对象编程语言中，可以通过private关键词来定义私有属性，这一点，在Javascript中可以通过模拟的方式来实现。
在PHP中，
public：公有的
protected：受保护的
private：私有的
对于大家都知道的属性，可以声明为public公有的
对于只需要子类知道的属性，可以声明为protected受保护的
对于只需要自己知道的属性，可以声明为private私有属性

在Javascript中只有两种修饰符：公有与私有，没有受保护的
在构造函数内部，通过this关键词声明的属性就是公有属性，通过var声明的属性就是私有属性。
function 构造器名称() {
	//公有属性
	this.name = 'zhangsan';
	//私有属性
	var sifangqian;
}

在实际项目开发中，如何对私有属性访问呢？
也可以公有方法对其进行赋值操作和访问

如果一个私有属性，只有set方法，就是只写属性
如果一个私有属性，只有get方法，就是只读属性

五、call与apply方法
1、回顾Javascript中的this指向
行内绑定：指向全局的Window对象
动态绑定：当前正在操作的DOM对象
全局作用域：指向了Window对象
谁调用了这个函数，函数内部的this就指向谁

在实际项目开发中，我们可不可以手工更改this的指向？
答：可以的，可以使用call或apply方法实现

2、call与apply方法的定义
	call([thisObj[,arg1[,arg2[,argN]]]])
	参数说明：
	thisObj：要指向的对象
	arg1,arg2,arg3…：参数列表

	apply([thisObj[,argArray]]) 
	参数说明：
	thisObj：要指向的对象
	[argArray]：要求是一个数组，传递的参数就是数组中的一个元素

call与apply方法区别？
call与apply方法两者在功能上是完全一致，两者只有语法的不同。

3、call与apply方法执行流程
① 更改函数内部的this指向，让其指向第一个参数
② 执行函数

六、类的继承
在有些面向对象的编程语言中，可以通过extends关键词来实现类继承，这一点，在Javascript可以通过模拟的方式来实现。
在Javascript由三种方式可以实现类的继承
1、通过Object原型对象实现类的继承
Object.prototype.ext=function(parObject){
		for(var i in parObject){
			this[i]=parObject[i];
		}
};
参数说明：
parObject：父类对象
for…in…：主要功能，遍历对象

2、通过call或apply方法实现类的继承
3、通过原型继承实现类的继承

以上三种方式都可以完成类的继承，任选其一即可。
三种主要区别：
第一种方法是向Object原型对象中添加ext属性，虽然可以完成类的继承，但是会在所有对象中增加一个ext属性。
第二种方法是更改Person构造器中的this指向，其可以完成类的继承，但是会增大对象的体积。
第三种方法是通过原型继承的方式来实现类的继承，没有增大对象的体积，此方法应该是最优的。

七、浏览器的调试
（IE、Firefox）浏览器
语法错误
逻辑错误
如果是语法错误，IE浏览器调试方式如下：

逻辑错误，IE调试方式如下：
1)F12或单击工具->开发者工具，打开工具箱
2)在你认为可能出错的位置添加断点，然后单击启动调试按钮
3)然后在监视窗口，添加要监视的变量：

按钮顺序：逐语句、逐过程、跳出
逐语句：代码一行一行执行，遇到函数跳入函数内部执行
逐过程：代码一行一行执行，遇到函数直接返回执行后的结果
跳出：如果不小心跳入函数内部，想尽快结束可以通过跳出按钮
八、贪吃蛇小游戏