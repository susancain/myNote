面向对象编程: 不是一种技术,而是一种思想: 一种一定要指定事务操作的主体的思想.
OOP: Object Oriented Programming: 在基于面向过程的基础上, 增加事务操作的主体.
	面向对象基本概念
		类, 对象和实例化
		类: class, 分类的意思, 将一类具有相同特性,相同能力的事务主体归到一起.
			类就是事务的操作主体
		对象: object,是一类数据类型: 对象是类的具体的实体(实例)
			对象: 是类的具象
			类: 是对象的抽象
		实例化: new, 从类产生对象的过程
	基本实现
		现实生活中,是先有活生生的实体, 才会对其就行命名和抽象(对象->类): 在程序的世界里: 却是通过抽象去匹配实体(类->对象).
		定义类: 形成一个抽象概念
			Class 类名{
			//类成员
			}
			对象: 从类形成对象, 实例化: new
			New 类名/类名();
	类成员
		类成员: 在类的结构中,可以直接存在的成员
		类成员只有三种: 属性,方法和类常量
		属性
			定义在类中的变量
			要定义在类中,就需要有特殊的规范: 使用访问修饰限定符限制
			public: 公有的,表示修饰的成员既可以在类内部访问(类的大括号之内),又可以在类外部访问
			protected: 受保护的, 表示只有类内部可以访问(继承)
			private: 私有的, 表示只有自己类内部可以访问
			var:兼容性访问修饰限定符(PHP4以前),代表的就是public(公有的)
		方法
			定义在类中的函数
			方法也有访问修饰限定符限制: 默认的不使用代表public
		类常量
			定义在类中的常量: 只能使用const关键字定义,不能使用define函数
	类成员访问
		类成员中属性和方法由对象访问, 而类常量由类访问.
		对象访问属性
			$对象变量->属性的名字 = 值; // 可以查就可以改
		对象访问方法
			$对象变量->方法名字();
		对象访问类常量
			常量的访问方式:使用类访问
			类名::常量名; // :: 范围解析操作符
	私有成员访问
		私有(private): 规定只能在类的内部访问, 类内部只能有类成员(属性,方法和类常量)
		方法(本质函数)内部不限制任何代码: 私有成员的访问就是在类定义的方法中进行访问.
		方法内部不能直接访问属性名字: 系统会当做局部变量
		属性和方法都只能由对象来访问: 即便是在类的内部也必须用对象访问.
		私有方法也是通过在方法内部引入对象,然后再进行对方访问访问
	$this关键字
		$this是一种能够在对象调用方法的时候,会自动抓取对象的内存地址,然后赋值给$this, 然后就可以使用$this代表对象本身进行成员的访问.
		私有成员就可以在类的内部使用$this进行访问
	内存分析
		类是一种结构:不会自动执行, 存在于代码段
		对象复合数据类型: 存放到堆区
	魔术方法: 系统内部已经定义好的(规范好名字)的方法, 这种方法默认是用户没有显示定义,但是用户一旦在类中定义了指定的方法名字: 这些方法就会在某些特殊地方自动的被调用.
	所有的魔术方法都是以双下划线开始后接方法名字.
		构造方法
			方法名字: __construct(), 类在形成对象的过程中(实例化),之后会被形成的对象自动调用的方法: 构造对象.
			构造方法的作用: 构造对象, 为了初始化属性
			构造方法的属性初始化的值往往从外部进行传入的:参数(构造方法形参)
			在很多语言中: 构造方法的方法名字不叫__construct而是与类名同名
		析构方法
			析构方法: __destruct(), 当对象被销毁之前,对象会自动调用的方法.
			作用: 释放所有的资源.(PHP中自动释放资源: 很少使用析构方法)
			手动释放对象
			1.让保存对象的变量指向新的内存地址
			2.释放变量:unset
			3.将变量置空
	对象赋值
		对象用变量保存, 变量可以赋值给另外的变量: 实际上就是对象的赋值.
		对象赋值是引用传递
	对象比较
		1.对象是否属于同一个类
		2.比较属性的个数
		3.比较属性的值
		4.全等比较: 只有同一个对象才可以true,否则永远为false
封装数据库操作类
	1.新建一个DB类文件: DB.class.php
	2.考虑类的属性: 主机,端口,用户名,密码,字符集,数据库名字等
	应该尽可能的增加类对成员的控制: 只需要在类内部访问的,一定不要其能够被外部访问
	Private > protected > public
	3.属性初始化: 构造方法
	要实现一个功能: 就对应应该有一个方法(函数)
	4.连接数据库
	5.设置字符集
	6.选择数据库
	7.发现所有的SQL语句都是由mysql_query执行,而且都有可能出错: 将SQL语句的执行以及判断错误单独封装成一个方法.
	8.将凡是用到mysql_query执行SQL语句的地方,调用db_query方法
	9.增加新增功能
	10.修改功能+删除功能: 都是返回受影响的行数
	11.查询功能: 分成两种: 查询单一结果;查询多条结果
	a)单一结果
	b)全部结果
	12.每次得到数据库类的对象之后: 必不可少的是要: 连接数据库,设置字符集,选择数据库: 应该在产生对象的时候就自动已经做好的. 在构造方法中内部调用方法.
	13.既然连接数据库,设置字符集和选择数据库已经变成内部调用: 外部根本不需要调用: 应该尽可能的增加类对成员的控制: 变成私有private
类加载
	类是一种结构: 如果要访问类,前提是类在内存中存在.
	类一般是一个单独的文件: 若要使用类就得加载类.
	手动加载
		在使用类之前,手动的将类对应的文件给包含进来
	自动加载
		自动加载: 系统会给提供一种机制: 如果系统当前要用类(实例化),但是系统又没有在内存中找到对应的类: 机制就会被触发, 可以通过被触发的机制,修改机制的内部,使得能够按照某个通用的规则将类文件进行加载到内存.
self关键字
	self与$this相似: 都是在类的内部(方法内部)才能使用的关键字
	$this代表的是对象;self代表的是类名(self不能单独使用)
